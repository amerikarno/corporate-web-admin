import { store } from "@/app/store";
import { setUser } from "@/features/user/userSlice";
import { mockUser } from "@/__Test__/utils";
import { act, fireEvent, render, screen, waitFor } from "@testing-library/react";
import { Provider } from "react-redux";
import { MemoryRouter } from "react-router-dom";
import "@testing-library/jest-dom";
import OrderTradeEdit from "@/pages/createJob/orderTrade/orderTrade";
import userEvent from '@testing-library/user-event';

jest.mock("@/lib/utils", () => ({
    ...jest.requireActual("@/lib/utils"),
    isExpiredToken: jest.fn().mockReturnValue(false),
  }));

describe("test create order trade", () => {
    beforeEach(() => {
      jest.clearAllMocks();
      store.dispatch(setUser(mockUser));
    });
  
    test("test input data(multiple input type)", async () => {

      render(
        <Provider store={store}>
          <MemoryRouter>
            <OrderTradeEdit/>
          </MemoryRouter>
        </Provider>
      );

      const corporateCode = screen.getByTestId("Corporate Code") as HTMLInputElement;;
      expect(corporateCode).toBeInTheDocument();
      fireEvent.change(corporateCode, { target: { value: 80000001 } });
      expect(corporateCode).toHaveValue(80000001);

      const cryptoAmount = screen.getByTestId("Crypto Amount") as HTMLInputElement;;
      expect(cryptoAmount).toBeInTheDocument();
      expect(cryptoAmount).toHaveValue(null);
      fireEvent.change(cryptoAmount, { target: { value: 10 } });
      expect(cryptoAmount).toHaveValue(10);

      const cryptoPrice = screen.getByTestId("Crypto Price") as HTMLInputElement;;
      expect(cryptoPrice).toBeInTheDocument();
      expect(cryptoPrice).toHaveValue(null);
      fireEvent.change(cryptoPrice, { target: { value: 10 } });
      expect(cryptoPrice).toHaveValue(10);

      const fiatAmount = screen.getByTestId("Fiat Amount") as HTMLInputElement;;
      expect(fiatAmount).toBeInTheDocument();
      expect(fiatAmount).toHaveValue(null);
      fireEvent.change(fiatAmount, { target: { value: 10 } });
      expect(fiatAmount).toHaveValue(10);

      userEvent.selectOptions(
        screen.getByTestId('currency-combobox'),
        screen.getByRole('option', { name: 'THB' } ),
      )
      expect(screen.getByRole('option', { name: 'THB' })).toBeInTheDocument();

      await waitFor(() => {
        const currency = screen.getByTestId("currency-combobox") as HTMLInputElement;
        console.log(currency.value);
        expect(currency.value).toBe("THB");
      });
      const submitButton = screen.getByText("Submit")
      expect(submitButton).toBeInTheDocument();
      
      await act(async ()=>{
        fireEvent.submit(submitButton);
      })

      console.log({
        corporateCode: {
          value: corporateCode.value,
          type: typeof corporateCode.value,
        },
        cryptoAmount: {
          value: cryptoAmount.value,
          type: typeof cryptoAmount.value,
        },
        cryptoPrice: {
          value: cryptoPrice.value,
          type: typeof cryptoPrice.value,
        },
        fiatAmount: {
          value: fiatAmount.value,
          type: typeof fiatAmount.value,
        },
        currency: {
          value: (screen.getByTestId("currency-combobox") as HTMLInputElement).value,
          type: typeof (screen.getByTestId("currency-combobox") as HTMLInputElement).value,
        },
      });

      // await waitFor(() => {
      //   // const errorMessage = screen.getByText("Corporate Code is required");
      //   // const errorMessage = screen.getByText("Expected string, received null");
      //   expect(errorMessage).toBeInTheDocument();
      // });

      //Expected form data
      // const expectedFormData = {

      // };

      await waitFor(() => {
        const state = store.getState();
        const corporateState = state.corporateTest;
        console.log("Corporate State After Submission:", corporateState);
        // expect(corporateState).toMatchObject(expectedFormData);
      })
  
    }, 20000);
  });