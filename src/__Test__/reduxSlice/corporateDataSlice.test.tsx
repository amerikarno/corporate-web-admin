// src/features/corporateData/corporateDataSlice.test.tsx

import reducer, {
    setCorporateData,
    clearCorporateData,
  } from '@/features/corporateData/corporateDataSlice';
  import { TCorporateData } from '@/pages/createJob/constant/type';
  
  const mockCorporateData: TCorporateData = {
    registerId: 123456,
    Info: {
      id: "info1",
      createBy: "Admin",
      CreatedAt: "2023-01-01T00:00:00Z",
      DeletedAt: null,
      registerId: 123456,
      name: "Example Corp",
      registrationNo: "REG123",
      taxId: "TAX123",
      dateOfIncorporation: "2020-01-01",
    },
    CorporateCountry: [
      {
        id: "country1",
        createBy: "Admin",
        CreatedAt: "2023-01-01T00:00:00Z",
        DeletedAt: null,
        registerId: 123456,
        isThailand: true,
        other: "N/A",
        types: 1,
      },
    ],
    CorporateAddress: [
      {
        address: [
          {
            id: "address1",
            createBy: "Admin",
            CreatedAt: "2023-01-01T00:00:00Z",
            DeletedAt: null,
            registerId: 123456,
            addressNo: "123",
            mooNo: "10",
            building: "Building A",
            floor: "5",
            soi: "15",
            road: "Main Street",
            tambon: "Tambon 1",
            amphoe: "Amphoe 1",
            province: "Province 1",
            postalCode: "12345",
            country: "USA",
            types: 1,
          },
        ],
        emailAddress: "contact@example.com",
        telephone: "123-456-7890",
      },
    ],
    CorporateFinancials: {
      id: "financial1",
      createBy: "Admin",
      CreatedAt: "2023-01-01T00:00:00Z",
      DeletedAt: null,
      registerId: 123456,
      registeredCapital: 1000000,
      revenuePerYear: 500000,
      netProfitLoss: 100000,
      shareholderEquity: 200000,
    },
    CorporateTypes: {
      id: "type1",
      createBy: "Admin",
      CreatedAt: "2023-01-01T00:00:00Z",
      DeletedAt: null,
      registerId: 123456,
      isJuristicThailand: true,
      isTaxExempt: true,
      isNonTaxExempt: false,
      isJuristicForeign: false,
      isOperatingInThailand: true,
      isNonOperatingInThailand: false,
      isOther: false,
      isPartnership: false,
      isGovernmentStateEnterprise: false,
      isCoOperative: false,
      isTaxExemptCompany: true,
    },
    BusinessTypes: {
      CreatedAt: "2023-01-01T00:00:00Z",
      DeletedAt: null,
      id: "business1",
      registerId: 123456,
      isAntiqueTrading: false,
      isHotelRestaurant: true,
      isArmament: false,
      isInsuranceAssurance: true,
      isCasinoGambling: false,
      isJewelryGoldTrading: false,
      isFoundation: false,
      isPropertyRealEstate: true,
      isMoneyTransfer: false,
      isEmploymentAgency: false,
      isEntertainment: false,
      isTravel: false,
      isFinancial: true,
      isEducationCenter: true,
      isForeignCurrencyExchange: false,
      isCryptoRelated: false,
      isOtherBusiness: false,
      otherBusinessType: "",
    },
    SourceOfIncomes: {
      CreatedAt: "2023-01-01T00:00:00Z",
      DeletedAt: null,
      id: "income1",
      registerId: 123456,
      isDonation: false,
      isLoan: false,
      isOtherIncome: false,
      isRevenue: true,
      isRevenueSelling: true,
      isStock: true,
      otherIncome: "",
    },
    CountrySourceIncomes: null,
    Contact: null,
    Directors: null,
    AuthorizedPersons: null,
    IndividualShareholders: null,
    Juristics: [],
    Banks: [],
  };
  
  describe('editCorporateSlice', () => {
    const initialState: TCorporateData = {
      registerId: 0,
      Info: {
        id: "",
        createBy: "",
        CreatedAt: "",
        DeletedAt: null,
        registerId: 0,
        name: "",
        registrationNo: "",
        taxId: "",
        dateOfIncorporation: "",
      },
      CorporateCountry: [],
      CorporateAddress: [],
      CorporateFinancials: {
        id: "",
        createBy: "",
        CreatedAt: "",
        DeletedAt: null,
        registerId: 0,
        registeredCapital: 0,
        revenuePerYear: 0,
        netProfitLoss: 0,
        shareholderEquity: 0,
      },
      CorporateTypes: {
        id: "",
        createBy: "",
        CreatedAt: "",
        DeletedAt: null,
        registerId: 0,
        isJuristicThailand: false,
        isTaxExempt: false,
        isNonTaxExempt: false,
        isJuristicForeign: false,
        isOperatingInThailand: false,
        isNonOperatingInThailand: false,
        isOther: false,
        isPartnership: false,
        isGovernmentStateEnterprise: false,
        isCoOperative: false,
        isTaxExemptCompany: false,
      },
      BusinessTypes: {
        CreatedAt: "",
        DeletedAt: null,
        id: "",
        registerId: 0,
        isAntiqueTrading: false,
        isHotelRestaurant: false,
        isArmament: false,
        isInsuranceAssurance: false,
        isCasinoGambling: false,
        isJewelryGoldTrading: false,
        isFoundation: false,
        isPropertyRealEstate: false,
        isMoneyTransfer: false,
        isEmploymentAgency: false,
        isEntertainment: false,
        isTravel: false,
        isFinancial: false,
        isEducationCenter: false,
        isForeignCurrencyExchange: false,
        isCryptoRelated: false,
        isOtherBusiness: false,
        otherBusinessType: "",
      },
      SourceOfIncomes: {
        CreatedAt: "",
        DeletedAt: null,
        id: "",
        registerId: 0,
        isDonation: false,
        isLoan: false,
        isOtherIncome: false,
        isRevenue: false,
        isRevenueSelling: false,
        isStock: false,
        otherIncome: "",
      },
      CountrySourceIncomes: null,
      Contact: null,
      Directors: null,
      AuthorizedPersons: null,
      IndividualShareholders: null,
      Juristics: [],
      Banks: [],
    };
  
    it('should handle initial state', () => {
      expect(reducer(undefined, { type: 'unknown' })).toEqual(initialState);
    });
  
    it('should handle setCorporateData', () => {
      const actual = reducer(initialState, setCorporateData(mockCorporateData));
      expect(actual).toEqual(mockCorporateData);
    });
  
    it('should handle clearCorporateData', () => {
      const stateWithCorporateData = mockCorporateData;
      const actual = reducer(stateWithCorporateData, clearCorporateData());
      expect(actual).toEqual(initialState);
    });
  });